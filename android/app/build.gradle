def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0.3'
}

private static Integer generateVersionCode(String flutterVersionName, String flutterVersionCode) {
    def versionValues = flutterVersionName.tokenize(".")
    def versionMajor = versionValues[0] as int
    def versionMinor = versionValues[1] as int
    def versionPatch = versionValues[2] as int
    def versionCode = flutterVersionCode as int
    return versionMajor * 1000 + versionMinor * 100 + versionPatch * 10 + versionCode
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'kotlin-android'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 30

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "pro.imes"
        minSdkVersion 21
        targetSdkVersion 30
        multiDexEnabled true
        versionCode generateVersionCode(flutterVersionName, flutterVersionCode)
        versionName flutterVersionName
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }
//        release {
//            if (System.getenv()["CI"]) {
//                storeFile file(System.getenv()["FCI_BUILD_DIR"] + "/loyalty.keystore")
//                storePassword System.getenv()["FCI_KEYSTORE_PASSWORD"]
//                keyAlias System.getenv()["FCI_KEY_ALIAS"]
//                keyPassword System.getenv()["FCI_KEY_PASSWORD"]
//            } else {
//                storeFile file("debug.keystore")
//                storePassword 'android'
//                keyAlias 'androiddebugkey'
//                keyPassword 'android'
//                storeFile file(keystoreProperties['storeFile'])
//                storePassword keystoreProperties['storePassword']
//                keyAlias keystoreProperties['keyAlias']
//                keyPassword keystoreProperties['keyPassword']
//            }
//        }
//    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            signingConfig signingConfigs.debug
        }
    }

    flutter {
        source '../..'
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
        implementation 'com.android.support:multidex:1.0.3'
    }
}